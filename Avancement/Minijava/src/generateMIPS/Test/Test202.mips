.text
# label main
main:
# t_0 := new Operator
	addi $sp, $sp, -4
	sw   $a0, 0($sp)
	li   $a0, 24
	jal  _new_object
	sw   $v0, 0($gp)
	lw   $a0, 0($sp)
	addi $sp, $sp, 4
# param t_0
# t_1 := call compute<1>
	addi $sp, $sp, -20
	sw   $fp, 16($sp)
	sw   $a3, 12($sp)
	sw   $a2, 8($sp)
	sw   $a1, 4($sp)
	sw   $a0, 0($sp)
	lw   $a0, 0($gp)
	move $fp, $sp
	addi $sp, $sp, -72
	jal  compute
	move $sp, $fp
	lw   $fp, 16($sp)
	lw   $a3, 12($sp)
	lw   $a2, 8($sp)
	lw   $a1, 4($sp)
	lw   $a0, 0($sp)
	addi $sp, $sp, 20
	sw   $v0, 4($gp)
# param t_1
# call _system_out_println<1>
	addi $sp, $sp, -4
	sw   $a0, 0($sp)
	lw   $a0, 4($gp)
	jal  _system_out_println
	lw   $a0, 0($sp)
	addi $sp, $sp, 4
# call _system_exit<0>
	jal  _system_exit
# label compute
compute:
	sw   $ra ,  -4($fp)
# b1 := 1
	li   $v0, 1
	sw   $v0, 12($a0)
# b2 := 0
	li   $v0, 0
	sw   $v0, 16($a0)
# i1 := 6
	li   $v0, 6
	sw   $v0, 0($a0)
# i2 := 7
	li   $v0, 7
	sw   $v0, 4($a0)
# t_2 := NOT b2
	lw   $v0, 16($a0)
	seq  $v0, $zero, $v0
	sw   $v0, -40($fp)
# t_3 := i1 LESS i2
	lw   $v0, 0($a0)
	lw   $v1, 4($a0)
	slt  $v0, $v0, $v1
	sw   $v0, -44($fp)
# t_4 := t_2 AND t_3
	lw   $v0, -40($fp)
	lw   $v1, -44($fp)
	and  $v0, $v0, $v1
	sw   $v0, -48($fp)
# t_5 := NOT t_4
	lw   $v0, -48($fp)
	seq  $v0, $zero, $v0
	sw   $v0, -52($fp)
# b := t_5
	lw   $v0, -52($fp)
	sw   $v0, 20($a0)
# iffalse b goto L_0
	lw   $v0, 20($a0)
	beq  $v0, $zero, L_0
# t_6 := i1 PLUS i2
	lw   $v0, 0($a0)
	lw   $v1, 4($a0)
	add  $v0, $v0, $v1
	sw   $v0, -56($fp)
# i := t_6
	lw   $v0, -56($fp)
	sw   $v0, 8($a0)
# goto L_1
	j    L_1
# label L_0
L_0:
# t_7 := i1 TIMES i2
	lw   $v0, 0($a0)
	lw   $v1, 4($a0)
	mult $v0, $v1
	mflo $v0
	sw   $v0, -60($fp)
# t_8 := i1 PLUS t_7
	lw   $v0, 0($a0)
	lw   $v1, -60($fp)
	add  $v0, $v0, $v1
	sw   $v0, -64($fp)
# t_9 := t_8 MINUS i2
	lw   $v0, -64($fp)
	lw   $v1, 4($a0)
	sub  $v0, $v0, $v1
	sw   $v0, -68($fp)
# t_10 := t_9 PLUS 1
	lw   $v0, -68($fp)
	li   $v1, 1
	add  $v0, $v0, $v1
	sw   $v0, -72($fp)
# i := t_10
	lw   $v0, -72($fp)
	sw   $v0, 8($a0)
# label L_1
L_1:
# return i
	lw   $ra ,  -4($fp)
	lw   $v0, 8($a0)
	jr $ra
##### RUNTIME for MIPS ######
#  _system_exit(),          #
#  _system_out_println(int) #
#  _new_object(int),        #
#  _new_array(int)          #
#############################
_system_exit:
        li   $v0, 10 #exit
        syscall    

_system_out_println:  # $a0: integer to print
        li   $v0, 1   # print integer
        syscall
        li   $a0, 10  # newline
        li   $v0, 11  # print car
        syscall
        jr   $ra

_new_object:          # $a0: Number of bytes, $v0 allocated memory address
        li   $v0, 9   # sbrk     
        syscall
     ## initialize with zeros
        move $t0, $a0
        move $t1, $v0
__loop0:
        beq  $t0, $zero, __exit0
        sb   $zero, 0($t1)
        addi $t1, $t1, 1
        addi $t0, $t0, -1
        j    __loop0
__exit0:
        jr   $ra
        
_new_array:  # $a0: Number of bytes
             # $v0: allocated memory address
             # allocated Bytes = $a0 + 4 , offset(0)== Number of int = $a0/4
        addi $a0, $a0, 4  # add space for size
        li   $v0, 9       # sbrk
        syscall
     ## initialize with zeros
        move $t0, $a0
        move $t1, $v0
__loop1:
        beq  $t0, $zero, __exit1
        sb   $zero, 0($t1)
        addi $t1, $t1, 1
        addi $t0, $t0, -1
        j    __loop1
__exit1:
     ## store the size (number of ints) in offset 0
        addi $t0, $a0, -4 
        sra  $t0, $t0, 2
        sw   $t0, 0($v0)
        jr   $ra
##EOF##
