package syntax;
import AST.*;
import main.OPER; /* enum des operateurs */
import main.TYPE; /* enum des types primitifs */

terminal DOT, COMMA, SEP, LC, RC, LP, RP, LB, RB ;     /* . , ; {}()[] */
terminal AND, LESS, NOT, TIMES, MINUS, PLUS, ASSIGN ;  /* operateurs */
terminal BOOLEAN, CLASS, ELSE, EXTENDS, IF, INT, MAIN, NEW ;
terminal OUT, PRINTLN, PUBLIC, RETURN, STATIC, STRING ;
terminal SYSTEM, THIS, VOID, WHILE ;
terminal Integer LENGTH;
terminal Integer LIT_INT ;
terminal Boolean LIT_BOOL ;
terminal String  IDENTIFIER ; 

/* productions basiques */
nonterminal Raxiome     axiome;     
nonterminal RklassMain  klassMain;    
nonterminal Rklass      klass;
nonterminal Rmethod     method;
nonterminal RidKlass    idKlass, pid;
nonterminal RidMeth     idMeth;
nonterminal RidVar      idVar;
nonterminal Rfield      field;
nonterminal Rvar        var;
nonterminal Rfarg        farg;
nonterminal Rtype       type;
  /* productions multiregles = Classes Abstraites */
nonterminal PmethMember  methMember;
nonterminal PklassMember klassMember;
nonterminal Pinst         inst;
nonterminal Pexpr         exp;
  /* listes de...  */
nonterminal Lklass       klasses;      
nonterminal LklassMember klassMembers;
nonterminal LmethMember  methMembers;
nonterminal Lexpr        exps,  exp1;  /* liste avec , */
nonterminal Lfarg        fargs, farg1; /* liste avec , */

 /* Precedences */
precedence right  ASSIGN;              /* prec 1  */
precedence left   AND;                 /* prec 4  */
precedence left   LESS;                /* prec 9  */
precedence left   PLUS, MINUS;         /* prec 11 (unary + - are prec14) */
precedence left   TIMES;               /* prec 12 */
precedence right  NOT;                 /* prec 14 */
//precedence nonassoc ELSE;    /* dangling else */

 /* Productions "monoregles" */
axiome  ::= klassMain:a klasses:z
                         {: RESULT = new Raxiome(a, z);
                            RESULT.addPos(axleft,zxright); :}
;
klassMain ::= CLASS:a idKlass:id LC
                 PUBLIC STATIC VOID MAIN LP STRING LB RB idVar:arg RP
                        LC inst:i RC
              RC:z
                         {: RESULT = new RklassMain(id, arg, i);
                            RESULT.addPos(axleft,zxright); :}
;
klass   ::= CLASS:a idKlass:b pid:c LC klassMembers:d RC:z
                         {: RESULT = new Rklass(b, c, d);
                            RESULT.addPos(axleft,zxright); :}
;
method  ::= PUBLIC:a type:b idMeth:c LP fargs:d RP LC
                                methMembers:e
                                RETURN exp:f SEP
                        RC:z                    
                         {: RESULT = new Rmethod(b, c, d, e, f);
                            RESULT.addPos(axleft,zxright); :}
;               
pid     ::= /* empty */  {: RESULT = new RidKlass("Object"); :}
            | EXTENDS:a idKlass:x 
                         {: RESULT = x;
                            RESULT.addPos(axleft,xxright); :}
;
idKlass ::= IDENTIFIER:a {: RESULT = new RidKlass(a);
                            RESULT.addPos(axleft,axright); :}
;
idMeth  ::= IDENTIFIER:a {: RESULT = new RidMeth(a);
                            RESULT.addPos(axleft,axright); :}
;
idVar   ::= IDENTIFIER:a {: RESULT = new RidVar(a);
                            RESULT.addPos(axleft,axright); :} 
;
field   ::= type:a idVar:b SEP:x
                         {: RESULT = new Rfield(a, b);
                            RESULT.addPos(axleft,xxright); :}
;
var     ::= type:a idVar:b SEP:x
                         {: RESULT = new Rvar(a, b);
                            RESULT.addPos(axleft,xxright); :} 
;       
farg    ::= type:a idVar:x
                         {: RESULT = new Rfarg(a, x);
                            RESULT.addPos(axleft,xxright); :} 
;
type    ::=  BOOLEAN:a   {: RESULT = new Rtype(TYPE.BOOL);
                            RESULT.addPos(axleft,axright); :}
        | INT:a          {: RESULT = new Rtype(TYPE.INT);
                            RESULT.addPos(axleft,axright); :}
        | IDENTIFIER:a   {: RESULT = new Rtype(a);
                            RESULT.addPos(axleft,axright); :}
        | INT:a LB RB:x    {: RESULT = new Rtype(TYPE.INT_ARRAY);
                            RESULT.addPos(axleft,xxright); :}
; 

/* Classes abstraites P* */
klassMember ::= field:a {: RESULT = a;
                           RESULT.addPos(axleft,axright); :}
            | method:a  {: RESULT = a;
                           RESULT.addPos(axleft,axright); :}
;
methMember ::= var:a    {: RESULT = a;
                           RESULT.addPos(axleft,axright); :}
            | inst:a    {: RESULT = a;
                           RESULT.addPos(axleft,axright); :}
;
inst::= LC methMembers:a RC:x   
                        {: RESULT = new RIblock(a);
                           RESULT.addPos(axleft,xxright); :}
    | IF:a LP exp:b RP inst:c ELSE inst:x       
                        {: RESULT = new RIif(b, c, x);
                           RESULT.addPos(axleft,xxright); :}
    | WHILE:a LP exp:b RP inst:x
                        {: RESULT = new RIwhile(b, x);
                           RESULT.addPos(axleft,xxright); :}
    | SYSTEM:a DOT OUT DOT PRINTLN LP exp:b RP SEP:x
                        {: RESULT = new RIprint(b);
                           RESULT.addPos(axleft,xxright); :}
    | idVar:a ASSIGN exp:b SEP:x
                        {: RESULT = new RIassign(a, b);
                           RESULT.addPos(axleft,xxright); :}
    | idVar:a LB exp:b RB ASSIGN exp:c SEP:x
                        {: RESULT = new RIassignArray(a,b,c);
                           RESULT.addPos(axleft,xxright); :}
;
exp   ::= exp:a AND exp:x
                        {: RESULT = new REopBin(a, OPER.AND, x);
                           RESULT.addPos(axleft,xxright); :}
        | exp:a LESS exp:x
                        {: RESULT = new REopBin(a, OPER.LESS, x);
                           RESULT.addPos(axleft,xxright); :}
        | exp:a PLUS exp:x
                        {: RESULT = new REopBin(a, OPER.PLUS, x);
                           RESULT.addPos(axleft,xxright); :}
        | exp:a MINUS exp:x     
                        {: RESULT = new REopBin(a, OPER.MINUS, x);
                           RESULT.addPos(axleft,xxright); :}
        | exp:a TIMES exp:x     
                        {: RESULT = new REopBin(a, OPER.TIMES, x);
                           RESULT.addPos(axleft,xxright); :}
        | NOT:a exp:x           
                        {: RESULT = new REopUn(OPER.NOT, x);
                           RESULT.addPos(axleft,xxright);  :}
        | LP:a exp:b RP:x
                        {: RESULT = b;
                           RESULT.addPos(axleft,xxright);  :}
        | idVar:a       {: RESULT = new REvar(a);
                           RESULT.addPos(axleft,axright);  :}
        | THIS:a        {: RESULT = new REvar(new RidVar("this"));
                           RESULT.addPos(axleft,axright);  :}
        | LIT_BOOL:a    {: RESULT = new REbool(a);
                           RESULT.addPos(axleft,axright);  :}
        | LIT_INT:a     {: RESULT = new REint(a);
                           RESULT.addPos(axleft,axright);  :}
        | MINUS:a LIT_INT:x
                        {: RESULT = new REint(-x);
                           RESULT.addPos(axleft,xxright);  :}
        | NEW:a idKlass:b LP RP:x
                        {: RESULT = new REnew(b);
                           RESULT.addPos(axleft,xxright);  :}
        | exp:a DOT idMeth:b LP exps:c RP:x
                        {: RESULT = new REcall(a, b, c);
                           RESULT.addPos(axleft,xxright);  :}
        | exp:a LB exp:b RB:x
                        {: RESULT = new REarray(a,b) ;
                           RESULT.addPos(axleft,xxright);  :}
        | exp:a DOT LENGTH:x
                        {: RESULT = new RElen(a) ;
                           RESULT.addPos(axleft,xxright);  :}
        | NEW:a INT LB exp:b RB:x
                        {: RESULT = new REnewArray(b) ;
                           RESULT.addPos(axleft,xxright);  :}
;

// Lists and comma-separated lists
klasses ::= /* empty */      {: RESULT = new Lklass(); :}
        |  klasses:a klass:x                    
                             {: RESULT = a; RESULT.addFils(x);
                                RESULT.addPos(axleft,xxright); :}
;           
methMembers ::= /* empty */  {: RESULT = new LmethMember();    :}
                | methMembers:a methMember:x
                             {: RESULT = a; RESULT.addFils(x);
                                RESULT.addPos(axleft,xxright); :}
;
klassMembers ::= /* empty */ {: RESULT = new LklassMember();    :}
                | klassMembers:a klassMember:x
                             {: RESULT = a; RESULT.addFils(x);
                                RESULT.addPos(axleft,xxright);  :}
;
exps    ::= /* empty */      {: RESULT = new Lexpr();           :}
        | exp1:a             {: RESULT = a; :}
;
exp1    ::= exp:a            {: RESULT = new Lexpr(); RESULT.addFils(a);
                                RESULT.addPos(axleft,axright);  :}
        | exp1:a COMMA exp:x
                             {: RESULT = a; RESULT.addFils(x);
                                RESULT.addPos(axleft,xxright);  :}
;
fargs   ::= /* empty */      {: RESULT = new Lfarg();                    :}
        | farg1:a            {: RESULT = a; :}
;
farg1   ::= farg:a           {: RESULT = new Lfarg();  RESULT.addFils(a);
                                RESULT.addPos(axleft,axright);  :}
        | farg1:a COMMA farg:x
                             {: RESULT = a;   RESULT.addFils(x);
                                RESULT.addPos(axleft,xxright);  :}
;        
